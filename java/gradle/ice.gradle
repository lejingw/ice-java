// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// **********************************************************************

if(!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

buildscript {
    ext.iceMavenRepo = System.env.ICE_MAVEN_REPOSITORY ? System.env.ICE_MAVEN_REPOSITORY : "repo.zeroc.com"
    ext.useLocalOnly = gradle.startParameter.isOffline()

    repositories {
        if (!useLocalOnly) {
            maven {
                url "https://${iceMavenRepo}/nexus/content/repositories/releases"
            }
        }
    }

    //
    // If the ice-builder-gradle repository exists add it to the local maven repositories,
    // so we can build using a local plugin version
    //
//    def builder  = new File([project(':demoIceHello').projectDir, "..", "..", "..", "..",
//                             "ice-builder-gradle", "build", "libs"].join(File.separator))
//
//    if(builder.exists()) {
//        repositories {
//            flatDir dirs: "file://${builder.getCanonicalPath()}"
//        }
//    }

    dependencies {
        classpath group: 'com.zeroc.gradle.ice-builder', name: 'slice', version: "1.3.2"
    }
}

ext.generatedDir = "$project.buildDir/generated"

def android = false
try {
    compileJava {
        options.debug = debug
    }
} catch(MissingMethodException ex) {
    //
    // For Android builds: thrown if compileJava isn't available.
    //
    android = true
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}
ext {
    demoJar = this.&demoJar
}

def localDependency(artifactId) {
    return "com.zeroc:${artifactId}:${project.version}"
//    return "com.zeroc:${artifactId}:3.6.2"
}
ext {
    localDependency = this.&localDependency
}

if (!android) {
    //
    // Find BerkeleyDB JAR
    //
    if(dbHome) {
        ext.dbJar = file("${dbHome}/db.jar")
    } else {
        def subdirs
        def os = System.properties['os.name']
        if(os.contains("Windows")) {
            subdirs = [ "${slice.iceHome}/lib/",
                        "${slice.iceHome}/cpp/third-party-packages/berkeley.db.java7/build/native/lib"]
        } else {
            subdirs = [
                "/usr/local/opt/ice/libexec/lib/",
                "/usr/local/opt/berkeley-db53/lib/",
                "/usr/local/lib/",
                "/usr/share/java/",
                "/opt/Ice-${project.version}/lib/",
                "/opt/db/lib/",
                "/usr/lib/"]
        }

        ext.dbJar = subdirs.collect({
            file(it).listFiles().findAll({
                it.name in ["db-5.3.28.jar", "db-5.3.21.jar", "db.jar"]
            }).collect()
        }).flatten().find({true})
    }

    if(!ext.dbJar || !ext.dbJar.exists()) {
        throw new GradleException("Unable to find Berkeley DB JAR file, you may have to install it or set dbHome in gradle.properties.");
    }
}
